"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/lh";
exports.ids = ["pages/api/lh"];
exports.modules = {

/***/ "./src/pages/api/lh/index.ts":
/*!***********************************!*\
  !*** ./src/pages/api/lh/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! puppeteer */ \"puppeteer\");\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(puppeteer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst baseUrl = \"https://www.myhome.go.kr/hws/portal/sch/selectRsdtRcritNtcDetailView.do\";\nasync function handler(req, res) {\n  try {\n    const {\n      pblancId\n    } = req.query;\n    const browser = await puppeteer__WEBPACK_IMPORTED_MODULE_0___default().launch({\n      headless: false,\n      devtools: true\n    });\n    const page = await browser.newPage();\n    const urlParams = new URLSearchParams({\n      pblancId: pblancId.toString()\n    });\n    await page.goto(`${baseUrl}?${urlParams.toString()}`);\n    const articleId = parseInt(pblancId.toString(), 10);\n    const basicInfos = await page.$eval(\".viewArea\", el => {\n      let basicInfos = {};\n      Array.from(el.querySelectorAll(\".basicInfo > .info dt\")).map(DT => {\n        if (DT.innerText.trim() === \"공급기관\") {\n          Object.assign(basicInfos, {\n            corporation: DT.nextElementSibling.innerText\n          });\n        }\n\n        if (DT.innerText.trim() === \"유형\") {\n          Object.assign(basicInfos, {\n            leaseType: DT.nextElementSibling.innerText\n          });\n        }\n\n        if (DT.innerText.trim() === \"주택유형\") {\n          Object.assign(basicInfos, {\n            houseType: DT.nextElementSibling.innerText\n          });\n        }\n      });\n      Object.assign(basicInfos, {\n        target: Array.from(el.querySelectorAll(\".basicInfo > .info .ds\")).map(el => el.innerText)\n      });\n      return {\n        articleType: el.querySelector(\".viewTop > span\").innerText,\n        articleTitle: el.querySelector(\".viewTop > em\").innerText,\n        articleDetailLink: el.querySelector(\".basicInfo .detailBtn a\").href,\n        basicInfo: basicInfos\n      };\n    });\n    const list = await page.$$(\"#hsmpNmUl>li\");\n    let danjiInfos = [];\n\n    for (const node of Array.from(list)) {\n      await node.click();\n      const danjiInfo = await page.$eval(\".danjiInfo\", el => {\n        const downloadEl = el.querySelector(\"td > a\");\n        const supplyInfosEl = el.querySelector(\"#suplyTableBody\");\n        const rows = supplyInfosEl.children;\n        const supplyInfos = Array.from(rows).map(row => {\n          const children = row.children;\n          return {\n            type: children[0].innerText,\n            exclusive: children[1].innerText,\n            totalNumber: children[2].innerText,\n            priorityNumber: children[3].innerText,\n            normalNumber: children[4].innerText,\n            totalAmount: children[4].innerText,\n            depositAmount: children[5].innerText,\n            middleAmount: children[6].innerText,\n            remainAmount: children[7].innerText,\n            monthlyAmount: children[8].innerText\n          };\n        });\n        return {\n          name: el.querySelector(\"#hsmpNmUl>.on\").innerText,\n          address: el.querySelector(\"#fullAdres\").innerText.trim(),\n          totalUnit: el.querySelector(\"#totHshldCo\").innerText.trim(),\n          supplyUnit: el.querySelector(\"#lttotHoCo\").innerText.trim(),\n          entranceYear: el.querySelector(\"#mvnPrearngeYear\").innerText.trim(),\n          entranceMonth: el.querySelector(\"#mvnPrearngeMt\").innerText.trim(),\n          heatType: el.querySelector(\"#heatMthdNm\").innerText.trim(),\n          scale: el.querySelector(\"#dongCo\").innerText.trim(),\n          reference: el.querySelector(\"#refrnc\").innerText.trim(),\n          etc: el.querySelector(\"#partclrMatter\").innerText.trim(),\n          download: {\n            filename: downloadEl ? downloadEl.innerText.trim() : \"\",\n            link: downloadEl ? downloadEl.href : \"\"\n          },\n          supplyInfos\n        };\n      });\n      const naverAddressesResponse = await axios__WEBPACK_IMPORTED_MODULE_1___default().get(`https://naveropenapi.apigw.ntruss.com/map-geocode/v2/geocode?query=${encodeURIComponent(danjiInfo.address)}`, {\n        headers: {\n          \"X-NCP-APIGW-API-KEY-ID\": \"supkh581zm\",\n          \"X-NCP-APIGW-API-KEY\": \"fbz2fnolfzk3nJtxKkkh4dhs8mKBlOBbR27HjxS5\"\n        }\n      });\n\n      if (naverAddressesResponse.status === 200 && naverAddressesResponse.data && naverAddressesResponse.data.addresses.length > 0) {\n        Object.assign(danjiInfo, {\n          addressDetail: naverAddressesResponse.data.addresses[0]\n        });\n      }\n\n      danjiInfos.push(_objectSpread({}, danjiInfo));\n    }\n\n    const planInfo = await page.$eval(\".schInfo .table_type2\", el => {\n      let plansInfo = {};\n      let supplyInfos = [];\n      el.querySelectorAll(\"tr\").forEach(row => {\n        if (row.querySelector(\"th\") && row.querySelector(\"th\").innerText === \"모집공고일\") {\n          Object.assign(plansInfo, {\n            planDate: row.querySelector(\"td\").innerText\n          });\n          return;\n        }\n\n        if (row.querySelector(\"th\") && row.querySelector(\"th\").innerText === \"당첨자 발표일\") {\n          Object.assign(plansInfo, {\n            lotteryDate: row.querySelector(\"td\").innerText\n          });\n          return;\n        }\n\n        if (row.querySelector(\"th\") && row.querySelector(\"th\").innerText === \"일정관련 안내사항\") {\n          Object.assign(plansInfo, {\n            planNoticeInfo: row.querySelector(\"td\").innerText\n          });\n          return;\n        }\n\n        const thLength = row.querySelectorAll(\"th\").length;\n        const rowSpan = row.querySelector(\"th\") && parseInt(row.querySelector(\"th\").getAttribute(\"rowspan\"), 10);\n\n        if (thLength === 1 && !!rowSpan) {\n          supplyInfos.push({\n            supplyType: row.querySelector(\"th\").innerText,\n            priority: \"1순위\",\n            conditions: Array.from(row.querySelectorAll(\"td dt\")).map(dt => {\n              return {\n                title: dt.innerText,\n                description: dt.nextElementSibling.innerText\n              };\n            })\n          });\n        }\n\n        if (thLength === 2 && rowSpan === 2) {\n          supplyInfos.push({\n            supplyType: row.querySelectorAll(\"th\")[0].innerText,\n            priority: row.querySelectorAll(\"th\").length > 1 ? row.querySelectorAll(\"th\")[1].innerText : \"1순위\",\n            conditions: Array.from(row.querySelectorAll(\"td dt\")).map(dt => {\n              return {\n                title: dt.innerText,\n                description: dt.nextElementSibling.innerText\n              };\n            })\n          });\n          const nextRow = row.nextElementSibling;\n          supplyInfos.push({\n            supplyType: row.querySelectorAll(\"th\")[0].innerText,\n            priority: nextRow.querySelector(\"th\") ? nextRow.querySelector(\"th\").innerText : \"1순위\",\n            conditions: Array.from(nextRow.querySelectorAll(\"td dt\")).map(dt => {\n              return {\n                title: dt.innerText,\n                description: dt.nextElementSibling.innerText\n              };\n            })\n          });\n        }\n\n        if (thLength === 2 && rowSpan === 3) {\n          supplyInfos.push({\n            supplyType: row.querySelectorAll(\"th\")[0].innerText,\n            priority: row.querySelectorAll(\"th\").length > 1 ? row.querySelectorAll(\"th\")[1].innerText : \"1순위\",\n            conditions: Array.from(row.querySelectorAll(\"td dt\")).map(dt => {\n              return {\n                title: dt.innerText,\n                description: dt.nextElementSibling.innerText\n              };\n            })\n          });\n          const nextRow = row.nextElementSibling;\n          supplyInfos.push({\n            supplyType: row.querySelectorAll(\"th\")[0].innerText,\n            priority: nextRow.querySelector(\"th\") ? nextRow.querySelector(\"th\").innerText : \"1순위\",\n            conditions: Array.from(nextRow.querySelectorAll(\"td dt\")).map(dt => {\n              return {\n                title: dt.innerText,\n                description: dt.nextElementSibling.innerText\n              };\n            })\n          });\n          const nextnextRow = nextRow.nextElementSibling;\n          supplyInfos.push({\n            supplyType: row.querySelectorAll(\"th\")[0].innerText,\n            priority: nextnextRow.querySelector(\"th\") ? nextnextRow.querySelector(\"th\").innerText : \"1순위\",\n            conditions: Array.from(nextnextRow.querySelectorAll(\"td dt\")).map(dt => {\n              return {\n                title: dt.innerText,\n                description: dt.nextElementSibling.innerText\n              };\n            })\n          });\n        }\n      });\n\n      if (supplyInfos.length > 0) {\n        Object.assign(plansInfo, {\n          supplyInfos: [...supplyInfos]\n        });\n      }\n\n      return plansInfo;\n    });\n    await browser.close(); // const uploadParams = {\n    //   Bucket: \"lease-project\",\n    //   Key: `detail/lease-item-${pblancId}.json`,\n    //   ACL: \"public-read\",\n    //   Body: JSON.stringify({ articleId, ...basicInfos, danjiInfos, planInfo }),\n    //   ContentType: \"application/json\",\n    // };\n    // try {\n    //   const s3 = new AWS.S3({\n    //     accessKeyId: \"AKIAXW3POAMCWWENDUP6\",\n    //     secretAccessKey: \"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\",\n    //     region: \"ap-northeast-2\",\n    //   });\n    //   await s3.upload(uploadParams).promise();\n    // } catch (err) {\n    //   res.status(500).json({\n    //     statusCode: 500,\n    //     error: true,\n    //     errorMessage: \"S3 upload Failed\",\n    //     result: {},\n    //   });\n    // }\n\n    res.status(200).json({\n      statusCode: 200,\n      error: false,\n      errorMessage: \"\",\n      result: _objectSpread(_objectSpread({\n        articleId\n      }, basicInfos), {}, {\n        danjiInfos,\n        planInfo\n      })\n    });\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      error: true,\n      errorMessage: err.message,\n      result: {}\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/api/lh/index.ts\n");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "puppeteer":
/*!****************************!*\
  !*** external "puppeteer" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("puppeteer");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./src/pages/api/lh/index.ts"));
module.exports = __webpack_exports__;

})();